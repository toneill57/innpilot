# Plan: Guest Chat Test Data Alignment

**Proyecto:** Alineación de Datos de Prueba para Guest Chat
**Fecha Inicio:** Octubre 1, 2025
**Estimación:** 70 minutos (1.2 horas)
**Estado:** Planificación 

---

## =Ë Contexto del Proyecto

### Situación Actual
El sistema de Guest Chat está funcional (FASE 1.1-1.3 completas según `CLAUDE.md`), pero los datos de prueba en la base de datos tienen inconsistencias que impiden probar el flujo completo con diferentes tipos de alojamientos:

**Problemas Identificados:**
1. **Tenant IDs inconsistentes**: 8 de 10 reservas tienen `tenant_id = "ONEILL SAID SAS"` (string) en lugar del UUID correcto
2. **Alojamientos sin asignar**: 8 de 10 reservas tienen `accommodation_unit_id = null`
3. **Unidades sin sincronizar**: Solo 1 de 9 unidades de Simmerdown está sincronizada con Motopress
4. **Falta diversidad**: Todas las conversaciones de prueba usan la misma reserva

**Datos Actuales:**
- **Tenants**: 2 registrados (Simmerdown UUID: `b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf`, Free Hotel Test)
- **Reservas**: 10 totales (8 con tenant_id incorrecto, 9 sin accommodation_unit_id)
- **Accommodation Units**: 9 de Simmerdown (solo "Suite Ocean View" sincronizada con Motopress)
- **Conversaciones**: 10 conversaciones activas, todas asociadas a "Test Guest"

### Estado Deseado
Sistema de prueba completo que permita:
1.  Todas las reservas con `tenant_id` correcto (UUID format)
2.  Cada reserva asignada a un alojamiento diferente de Simmerdown
3.  Validar que el Guest Chat funciona con diferentes tipos de unidades
4.  Probar el flujo completo: Login ’ Chat ’ Context retrieval específico por unidad

### Beneficios
- **Testing robusto**: Probar el chat con 9 tipos diferentes de alojamientos
- **Validación de integridad**: Confirmar que FKs y relaciones funcionan correctamente
- **Demo mejorado**: Mostrar capacidades del sistema con datos realistas
- **Debug facilitado**: Identificar problemas específicos por tipo de alojamiento

---

## <¯ Fases de Implementación

### FASE 1: Corrección de Tenant IDs (15 min)

**Objetivo:** Corregir inconsistencias en `guest_reservations.tenant_id`

**Tareas:**
1. **Update Batch** - Cambiar `tenant_id` de string a UUID
   - Query: `UPDATE guest_reservations SET tenant_id = 'b5c45f51-...' WHERE tenant_id = 'ONEILL SAID SAS'`
   - Afecta: 8 reservas

2. **Validación de Integridad**
   - Verificar que todas las FKs funcionan correctamente
   - Confirmar que `chat_conversations.reservation_id` sigue válido
   - Check: No foreign key violations

**Archivos Modificados:**
- Database: `guest_reservations` (8 UPDATEs)

**Tests de Validación:**
```sql
-- Confirmar que no quedan tenant_id tipo string
SELECT COUNT(*) FROM guest_reservations
WHERE tenant_id NOT IN (SELECT tenant_id::text FROM tenant_registry);

-- Validar FKs
SELECT gr.id, gr.tenant_id, cc.id as conversation_id
FROM guest_reservations gr
LEFT JOIN chat_conversations cc ON cc.reservation_id = gr.id
WHERE gr.tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf';
```

**Criterios de Éxito:**
-  0 reservas con tenant_id tipo string
-  Todas las conversaciones siguen accesibles
-  No errores de FK violation

---

### FASE 2: Asignación de Accommodation Units (20 min)

**Objetivo:** Asignar un `accommodation_unit_id` único a cada reserva

**Tareas:**
1. **Pre-validación** - Verificar hotel_id en unidades no sincronizadas
   - 8 unidades necesitan `hotel_id = '238845ed-8c5b-4d33-9866-bb4e706b90b2'`
   - Actualizar si falta

2. **Asignación de Unidades** - Match reservas con alojamientos

   | Reserva Code | Guest Name | Accommodation Unit | Justificación |
   |--------------|------------|-------------------|---------------|
   | RSV001 | María González | Suite Ocean View | Sincronizada con Motopress |
   | RSV002 | Carlos Rodríguez | Sunshine | Unit básica |
   | RSV003 | Ana Torres | Simmer Highs | Unit intermedia |
   | RSV004 | Luis Martínez | One Love | Temática |
   | RSV005 | Sofia Ramírez | Misty Morning | Temática |
   | RSV006 | Pedro López | Natural Mystic | Temática |
   | RSV007 | Carmen Silva | Dreamland | Premium |
   | RSV008 | Roberto Mora | Kaya | Temática |
   | TEST001 | Test Guest | Summertime | Testing |

**Queries de Implementación:**
```sql
-- RSV001 ’ Suite Ocean View
UPDATE guest_reservations
SET accommodation_unit_id = '43ff96da-dbef-4757-88e5-31f7618edd33'
WHERE reservation_code = 'RSV001';

-- RSV002 ’ Sunshine
UPDATE guest_reservations
SET accommodation_unit_id = 'ed0c8645-ba0a-4004-8a12-3f6fadcf7f26'
WHERE reservation_code = 'RSV002';

-- (continuar para todas las reservas...)
```

**Archivos Modificados:**
- Database: `guest_reservations` (9 UPDATEs)
- Database: `accommodation_units` (posiblemente 8 UPDATEs para hotel_id)

**Tests de Validación:**
```sql
-- Verificar que todas las reservas tienen accommodation_unit_id
SELECT COUNT(*) FROM guest_reservations
WHERE accommodation_unit_id IS NULL
AND tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf';

-- Validar que cada unidad está asignada a máximo 1 reserva activa
SELECT accommodation_unit_id, COUNT(*) as reservation_count
FROM guest_reservations
WHERE status = 'active'
GROUP BY accommodation_unit_id
HAVING COUNT(*) > 1;
```

**Criterios de Éxito:**
-  0 reservas de Simmerdown sin accommodation_unit_id
-  Cada unidad asignada a 1 reserva (no duplicados)
-  Todas las FKs válidas

---

### FASE 3: Validación de Datos de Unidades (15 min)

**Objetivo:** Asegurar que todas las `accommodation_units` tienen datos completos para el chat

**Tareas:**
1. **Audit de Datos Requeridos**
   - Check: `description` (obligatorio para context retrieval)
   - Check: `embedding_fast` y `embedding_balanced` (Matryoshka tiers)
   - Check: `short_description` (opcional pero recomendado)
   - Check: `tourism_features` (JSON para búsquedas)

2. **Generar Embeddings Faltantes** (si necesario)
   - Identificar unidades sin embeddings
   - Usar script: `node scripts/populate-embeddings.js` (si aplica)
   - O crear script ad-hoc para accommodation_units

**Query de Validación:**
```sql
SELECT
  id,
  name,
  CASE WHEN description IS NULL THEN 'L' ELSE '' END as has_description,
  CASE WHEN embedding_fast IS NULL THEN 'L' ELSE '' END as has_fast_embedding,
  CASE WHEN embedding_balanced IS NULL THEN 'L' ELSE '' END as has_balanced_embedding,
  CASE WHEN short_description IS NULL THEN ' ' ELSE '' END as has_short_desc
FROM accommodation_units
WHERE tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf'
ORDER BY name;
```

**Archivos Potencialmente Modificados:**
- Scripts: Posible script nuevo para generar embeddings de accommodation_units
- Database: `accommodation_units` (UPDATEs para embeddings/descriptions faltantes)

**Criterios de Éxito:**
-  9/9 unidades tienen `description` completa
-  9/9 unidades tienen embeddings (fast + balanced)
-   Documentar unidades con datos incompletos (si las hay)

---

### FASE 4: Testing del Flujo Completo (20 min)

**Objetivo:** Probar el Guest Chat con diferentes reservas y validar context retrieval

**Tareas:**
1. **Login Testing** - Probar autenticación con 3-4 reservas diferentes
   - Test 1: RSV001 (María González) ’ Suite Ocean View
   - Test 2: RSV004 (Luis Martínez) ’ One Love
   - Test 3: RSV007 (Carmen Silva) ’ Dreamland
   - URL: `http://localhost:3000/guest-chat/simmerdown`

2. **Context Retrieval Validation** - Confirmar que cada chat accede a su alojamiento
   - Query en chat: "¿Qué características tiene mi habitación?"
   - Verificar que la respuesta mencione el alojamiento correcto
   - Check sources en response metadata

3. **Conversation History** - Validar memoria persistente
   - Hacer 2-3 preguntas consecutivas
   - Verificar que mantiene contexto entre mensajes

**Proceso de Testing:**
```bash
# 1. Iniciar dev server
./scripts/dev-with-keys.sh

# 2. Abrir navegador
open http://localhost:3000/guest-chat/simmerdown

# 3. Login con diferentes reservas
# - Nombre: María González, Last 4: 4567
# - Nombre: Luis Martínez, Last 4: 3344
# - Nombre: Carmen Silva, Last 4: 7788

# 4. En cada sesión, preguntar:
# "¿Qué características tiene mi habitación?"
# "¿Cuál es la vista desde mi alojamiento?"
```

**Documentación:**
- Crear: `docs/guest-chat-test-data-setup/fase-4/TESTING_RESULTS.md`
- Incluir:
  - Screenshots de cada login exitoso
  - Respuestas del chat por cada alojamiento
  - Problemas encontrados (si los hay)
  - Recomendaciones de mejora

**Criterios de Éxito:**
-  Login exitoso con 3+ reservas diferentes
-  Context retrieval correcto para cada alojamiento
-  Memoria persistente funcional (2+ mensajes)
-  Documentación completa de resultados

---

## =à Stack Técnico

**Database:**
- Supabase PostgreSQL
- Tablas: `guest_reservations`, `accommodation_units`, `chat_conversations`, `chat_messages`
- Extensions: pgvector (Matryoshka embeddings)

**Tools:**
- MCP Supabase tools: `execute_sql`, `list_tables`
- Bash: Para testing manual del frontend
- Scripts: Posiblemente `populate-embeddings.js` adaptado

**APIs:**
- `/api/guest/login` - Autenticación de huéspedes
- `/api/guest/chat` - Chat conversacional con memoria

---

## =Ê Métricas de Éxito

### Métricas Cuantitativas
-  10/10 reservas con `tenant_id` UUID válido
-  9/9 reservas de Simmerdown con `accommodation_unit_id` asignado
-  9/9 accommodation_units con embeddings completos
-  3+ reservas probadas exitosamente en Guest Chat

### Métricas Cualitativas
-  Context retrieval preciso (menciona el alojamiento correcto)
-  Conversaciones persistentes con memoria funcional
-  Documentación completa del proceso
-  Sistema listo para demo/testing con stakeholders

---

## =Á Estructura de Documentación

```
docs/guest-chat-test-data-setup/
   fase-1/
      IMPLEMENTATION.md      # Queries ejecutadas, resultados
      CHANGES.md             # Reservas modificadas
      TESTS.md               # Validaciones ejecutadas
   fase-2/
      IMPLEMENTATION.md      # Asignaciones realizadas
      CHANGES.md             # Units actualizadas
      TESTS.md               # Validaciones FK
   fase-3/
      IMPLEMENTATION.md      # Audit results
      CHANGES.md             # Embeddings generados
      TESTS.md               # Validación de datos completos
   fase-4/
       TESTING_RESULTS.md     # Screenshots, respuestas del chat
       ISSUES.md              # Problemas encontrados
       RECOMMENDATIONS.md     # Mejoras sugeridas
```

---

## = Next Steps (Después de este proyecto)

1. **Población de datos realistas**
   - Agregar descriptions completas para las 8 unidades no sincronizadas
   - Completar `tourism_features` JSON para cada unidad

2. **Sincronización con Motopress**
   - Investigar por qué 8 unidades no están sincronizadas
   - Ejecutar sync manual si es necesario
   - Verificar `motopress_instance_id` para todas las unidades

3. **Automatización de tests**
   - Crear tests e2e para el flujo de login + chat
   - Agregar validaciones de context retrieval
   - CI/CD checks para integridad de datos

4. **Frontend UX improvements**
   - Mostrar nombre del alojamiento en el header del chat
   - Agregar foto de la unidad en la interfaz
   - Personalizar welcome message por tipo de unidad

---

##   Consideraciones y Riesgos

### Riesgos Identificados
1. **Datos de prueba vs producción**: Asegurar que estos cambios solo afecten datos de testing
2. **FK violations**: Cuidado al actualizar tenant_id, puede romper relaciones existentes
3. **Embeddings faltantes**: Si las unidades no tienen embeddings, el chat no podrá hacer retrieval

### Mitigaciones
1. Siempre validar con queries SELECT antes de UPDATE
2. Usar transacciones SQL si es posible
3. Documentar todos los cambios en `docs/guest-chat-test-data-setup/`
4. Mantener backup de queries originales para rollback

---

**Última actualización:** Octubre 1, 2025
**Autor:** Claude Code
**Revisores:** @oneill
