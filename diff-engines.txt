2c2
<  * Dev Chat Engine
---
>  * Public Chat Engine
4d3
<  * Development version of public chat engine for testing improvements.
6c5
<  * Includes travel intent extraction.
---
>  * Includes travel intent extraction for future API-based availability checks.
11,14c10,13
<   getOrCreateDevSession,
<   updateDevSession,
<   type DevSession,
< } from './dev-chat-session'
---
>   getOrCreatePublicSession,
>   updatePublicSession,
>   type PublicSession,
> } from './public-chat-session'
16c15
<   performDevSearch,
---
>   performPublicSearch,
18c17
< } from './dev-chat-search'
---
> } from './public-chat-search'
23,27d21
< import {
<   extractTravelIntent,
<   mergeIntent,
<   type TravelIntent,
< } from './dev-chat-intent'
45d38
< 
50c43
< export interface DevChatResponse {
---
> export interface PublicChatResponse {
64a58,64
>   travel_intent: {
>     check_in: string | null
>     check_out: string | null
>     guests: number | null
>     accommodation_type: string | null
>     captured_this_message: boolean
>   }
73c73
<  * Generate dev chat response with marketing focus
---
>  * Generate public chat response with marketing focus
78c78
<  * @returns DevChatResponse with response, intent, sources, and suggestions
---
>  * @returns PublicChatResponse with response, intent, sources, and suggestions
80c80
< export async function generateDevChatResponse(
---
> export async function generatePublicChatResponse(
84c84
< ): Promise<DevChatResponse> {
---
> ): Promise<PublicChatResponse> {
87,88c87,88
<   console.log('[dev-chat-engine] Processing message:', message.substring(0, 80))
<   console.log('[dev-chat-engine] Session:', sessionId, 'Tenant:', tenantId)
---
>   console.log('[public-chat-engine] Processing message:', message.substring(0, 80))
>   console.log('[public-chat-engine] Session:', sessionId, 'Tenant:', tenantId)
92,93c92,93
<     const session = await getOrCreateDevSession(sessionId, tenantId)
<     console.log('[dev-chat-engine] Session loaded:', session.session_id)
---
>     const session = await getOrCreatePublicSession(sessionId, tenantId)
>     console.log('[public-chat-engine] Session loaded:', session.session_id)
95,99c95,97
<     // STEP 1.5: Extract travel intent from message (conversational)
<     const intentStartTime = Date.now()
<     const extractedIntent = await extractTravelIntent(message)
<     const intentTime = Date.now() - intentStartTime
<     console.log(`[dev-chat-engine] Intent extracted in ${intentTime}ms:`, extractedIntent)
---
>     // STEP 2: Perform public search
>     const searchResults = await performPublicSearch(message, session)
>     console.log('[public-chat-engine] Search found:', searchResults.length, 'results')
101,108d98
<     // Merge with existing intent (preserves previous data)
<     session.travel_intent = mergeIntent(session.travel_intent, extractedIntent)
<     console.log('[dev-chat-engine] Merged intent:', session.travel_intent)
< 
<     // STEP 2: Perform dev search
<     const searchResults = await performDevSearch(message, session)
<     console.log('[dev-chat-engine] Search found:', searchResults.length, 'results')
< 
113c103
<     console.log(`[dev-chat-engine] Memory search: ${conversationMemories.length} results in ${memoryTime}ms`)
---
>     console.log(`[public-chat-engine] Memory search: ${conversationMemories.length} results in ${memoryTime}ms`)
115,116c105,107
<     // STEP 3: Build system prompt (marketing-focused)
<     const promptStartTime = Date.now()
---
>     // STEP 3: Removed travel intent extraction (matching dev-chat-engine.ts behavior)
> 
>     // STEP 4: Build system prompt (marketing-focused)
122,123d112
<     const promptTime = Date.now() - promptStartTime
<     console.log(`[dev-chat-engine] System prompt built in ${promptTime}ms (${systemPrompt.length} chars)`)
125,127c114
<     // STEP 4: Generate response with Claude Sonnet 4.5 (high quality marketing)
<     const claudeStartTime = Date.now()
<     console.log('[dev-chat-engine] ü§ñ Calling Claude Sonnet 4.5 API...')
---
>     // STEP 5: Generate response with Claude Sonnet 4.5
129,130c116
<     const claudeTime = Date.now() - claudeStartTime
<     console.log(`[dev-chat-engine] ‚úÖ Claude responded in ${claudeTime}ms (${response.length} chars)`)
---
>     console.log('[public-chat-engine] Generated response:', response.length, 'chars')
132,133c118,122
<     // STEP 5: Generate follow-up suggestions
<     const suggestions = generateDevSuggestions(searchResults)
---
>     // STEP 6: Generate follow-up suggestions
>     const suggestions = generatePublicSuggestions(searchResults, session.travel_intent)
> 
>     // STEP 7: Update session with conversation history
>     await updatePublicSession(session.session_id, message, response)
135,141c124
<     // STEP 6: Update session with conversation history
<     const dbStartTime = Date.now()
<     await updateDevSession(session.session_id, message, response)
<     const dbTime = Date.now() - dbStartTime
<     console.log(`[dev-chat-engine] Session updated in ${dbTime}ms`)
< 
<     // STEP 7: Prepare sources for response
---
>     // STEP 10: Prepare sources for response
154c137
<     console.log(`[dev-chat-engine] ‚úÖ Response generated in ${totalTime}ms`)
---
>     console.log(`[public-chat-engine] ‚úÖ Response generated in ${totalTime}ms`)
159a143,149
>       travel_intent: {
>         check_in: session.travel_intent.check_in,
>         check_out: session.travel_intent.check_out,
>         guests: session.travel_intent.guests,
>         accommodation_type: session.travel_intent.accommodation_type,
>         captured_this_message: false, // No longer extracting per message
>       },
163c153
<     console.error('[dev-chat-engine] Error:', error)
---
>     console.error('[public-chat-engine] Error:', error)
169a160,166
>       travel_intent: {
>         check_in: null,
>         check_out: null,
>         guests: null,
>         accommodation_type: null,
>         captured_this_message: false,
>       },
187c184
<   session: DevSession,
---
>   session: PublicSession,
221,229c218,220
<   // Build intent summary (only if data has been captured)
<   const hasIntent = session.travel_intent.check_in || session.travel_intent.guests || session.travel_intent.accommodation_type
<   const intentSummary = hasIntent
<     ? `
< INTENCI√ìN DE VIAJE CAPTURADA:
< ${session.travel_intent.check_in ? `- Check-in: ${session.travel_intent.check_in}` : ''}
< ${session.travel_intent.check_out ? `- Check-out: ${session.travel_intent.check_out}` : ''}
< ${session.travel_intent.guests ? `- Hu√©spedes: ${session.travel_intent.guests}` : ''}
< ${session.travel_intent.accommodation_type ? `- Tipo de alojamiento: ${session.travel_intent.accommodation_type}` : ''}
---
>   // NOTE: Travel intent is NOT included in system prompt
>   // It's extracted, saved to session, and returned to frontend for UI display
>   // Claude responds only to the current message context
231,233d221
< `
<     : ''
< 
242,244c230,234
< - Respuestas concisas pero informativas (3-5 oraciones m√°ximo)
< - Incluye CTAs (calls-to-action) cuando sea apropiado
< - Enumera amenities con dash simple (-), una por l√≠nea
---
> - NO uses texto en may√∫sculas en tus respuestas - escribe natural
> - Usa **negritas** solo para informaci√≥n clave (precios, nombres) en p√°rrafos
> - NUNCA uses **negritas** dentro de t√≠tulos (##, ###) - los t√≠tulos ya son bold
> - Respuestas concisas pero informativas (4-6 oraciones m√°ximo)
> - Incluye CTAs cuando sea apropiado
247,251c237,238
< - Cat√°logo COMPLETO de alojamientos (con precios y fotos)
< - Pol√≠ticas del hotel (check-in, check-out, cancelaci√≥n)
< - Informaci√≥n b√°sica de turismo en San Andr√©s (atracciones)
< - Contexto hist√≥rico de conversaciones pasadas (si aplica)
< - La mayor√≠a de los visitantes viaja en pareja, asume que buscan alojamiento para dos personas si no se especifica.
---
> - Solo tienes acceso a los RESULTADOS DE B√öSQUEDA abajo
> - NO inventes alojamientos, precios o informaci√≥n que no aparezca en los resultados
254a242
> - NO puedes ver disponibilidad en tiempo real (dir√≠gelos al sistema de reservas)
256,258c244
< - SIEMPRE menciona precios cuando est√©n disponibles
< - NO uses emojis de check/cross (‚úÖ/‚ùå) ni en listas, ni enumeraciones, ni recomendaciones ni validaciones. Preferible usar uno que otro emoji inteligente y relacionado con el amenity o caracter√≠stica que se est√© mencionando.
< - NO inventes informaci√≥n (si no sabes, di que no est√°s seguro y ofrece ayudar con otra cosa)
---
> - SOLO menciona precios y alojamientos que aparecen EXPL√çCITAMENTE en los resultados
260,261c246,247
< RECONOCIMIENTO DE INTENCI√ìN DE VIAJE:
< ${intentSummary} // Fechas, hu√©spedes, tipo de alojamiento capturados
---
> ${historicalContext}RESULTADOS DE B√öSQUEDA:
> ${searchContext || 'No se encontraron resultados relevantes.'}
263,268d248
< RESULTADOS DE B√öSQUEDA:
< ${searchContext} // Top 15 resultados con precios y similaridad
< 
< CONTEXTO DE CONVERSACIONES PASADAS:
< ${historicalContext} // Res√∫menes y temas clave
< 
270,275c250,254
< 1. Si identificas fechas/hu√©spedes, confirma y ofrece opciones relevantes
< 2. Si hay URL de disponibilidad, MENCIONA que pueden "ver disponibilidad en tiempo real" y sugi√©relo sutilmente
< 3. Destaca caracter√≠sticas √∫nicas (vista al mar, cocina completa, ubicaci√≥n, etc.)
< 4. Incluye precios cuando est√©n disponibles
< 5. Si preguntan sobre turismo, da informaci√≥n b√°sica y luego vuelve a alojamientos
< 6. Siempre termina con pregunta o CTA para continuar conversaci√≥n
---
> 1. Destaca caracter√≠sticas √∫nicas (vista al mar, cocina completa, ubicaci√≥n, etc.)
> 2. Incluye precios cuando est√©n disponibles
> 3. Si preguntan sobre turismo, da informaci√≥n b√°sica y luego vuelve a alojamientos
> 4. Siempre termina con pregunta o CTA para continuar conversaci√≥n
> 5. Considera el CONTEXTO DE CONVERSACIONES PASADAS para personalizar mejor tu respuesta
285c264
<  * Generate marketing response using Claude Sonnet 4.5 (high quality)
---
>  * Generate marketing response using Claude Sonnet 4.5
289c268
<   session: DevSession,
---
>   session: PublicSession,
305c284
<       model: 'claude-sonnet-4-5-20250929', // Sonnet 4.5 for marketing quality
---
>       model: 'claude-sonnet-4-5-20250929', // Latest Sonnet 4.5 for marketing quality
309d287
<       stream: false, // Set to true for streaming (handled separately)
327c305
<     console.error('[dev-chat-engine] Claude error:', error)
---
>     console.error('[public-chat-engine] Claude error:', error)
333a312,315
> // ============================================================================
> // Suggestion Generation
> // ============================================================================
> 
334a317,371
>  * Generate contextual follow-up suggestions
>  */
> function generatePublicSuggestions(
>   searchResults: VectorSearchResult[],
>   travelIntent: PublicSession['travel_intent']
> ): string[] {
>   const suggestions: string[] = []
> 
>   // Strategy 1: Intent-based suggestions
>   if (!travelIntent.check_in) {
>     suggestions.push('¬øQu√© fechas tienen disponibles?')
>   }
> 
>   if (!travelIntent.guests) {
>     suggestions.push('¬øPara cu√°ntas personas?')
>   }
> 
>   if (travelIntent.check_in && !searchResults.some((r) => r.table === 'accommodation_units_public')) {
>     suggestions.push('Ver fotos de los apartamentos')
>   }
> 
>   // Strategy 2: Result-based suggestions
>   const hasAccommodations = searchResults.some((r) => r.table === 'accommodation_units_public')
>   const hasPolicies = searchResults.some((r) => r.table === 'policies')
>   const hasMuva = searchResults.some((r) => r.table === 'muva_content')
> 
>   if (hasAccommodations) {
>     suggestions.push('Comparar precios de todas las opciones')
>     suggestions.push('¬øTienen cocina completa?')
>   }
> 
>   if (hasMuva && !hasAccommodations) {
>     suggestions.push('Volver a opciones de alojamiento')
>   }
> 
>   if (hasPolicies) {
>     suggestions.push('¬øCu√°l es la pol√≠tica de cancelaci√≥n?')
>   }
> 
>   // Strategy 3: Generic helpful suggestions
>   if (suggestions.length < 3) {
>     suggestions.push('¬øQu√© incluye el precio?')
>     suggestions.push('¬øCu√°l tiene la mejor vista al mar?')
>     suggestions.push('¬øQu√© hay cerca del hotel?')
>   }
> 
>   // Return top 3 unique suggestions
>   return Array.from(new Set(suggestions)).slice(0, 3)
> }
> 
> // ============================================================================
> // Streaming Response Generation
> // ============================================================================
> 
> /**
336c373
<  * Returns an async generator that yields text chunks
---
>  * Yields chunks of text as they arrive from Claude
338c375
< export async function* generateDevChatResponseStream(
---
> export async function* generatePublicChatResponseStream(
345,346c382,383
<   console.log('[dev-chat-engine-stream] Processing message:', message.substring(0, 80))
<   console.log('[dev-chat-engine-stream] Session:', sessionId, 'Tenant:', tenantId)
---
>   console.log('[public-chat-engine-stream] Processing message:', message.substring(0, 80))
>   console.log('[public-chat-engine-stream] Session:', sessionId, 'Tenant:', tenantId)
350,351c387,388
<     const session = await getOrCreateDevSession(sessionId, tenantId)
<     console.log('[dev-chat-engine-stream] Session loaded:', session.session_id)
---
>     const session = await getOrCreatePublicSession(sessionId, tenantId)
>     console.log('[public-chat-engine-stream] Session loaded:', session.session_id)
353,355c390,392
<     // STEP 2: Perform dev search
<     const searchResults = await performDevSearch(message, session)
<     console.log('[dev-chat-engine-stream] Search found:', searchResults.length, 'results')
---
>     // STEP 2: Perform public search
>     const searchResults = await performPublicSearch(message, session)
>     console.log('[public-chat-engine-stream] Search found:', searchResults.length, 'results')
361c398
<     console.log(`[dev-chat-engine-stream] Memory search: ${conversationMemories.length} results in ${memoryTime}ms`)
---
>     console.log(`[public-chat-engine-stream] Memory search: ${conversationMemories.length} results in ${memoryTime}ms`)
363c400,402
<     // STEP 3: Build system prompt
---
>     // STEP 3: Removed travel intent extraction (matching dev-chat-engine.ts behavior)
> 
>     // STEP 4: Build system prompt
371c410
<     console.log(`[dev-chat-engine-stream] System prompt built in ${promptTime}ms`)
---
>     console.log(`[public-chat-engine-stream] System prompt built in ${promptTime}ms`)
373c412
<     // STEP 4: Stream response from Claude
---
>     // STEP 7: Stream response from Claude
375c414
<     console.log('[dev-chat-engine-stream] ü§ñ Starting Claude stream...')
---
>     console.log('[public-chat-engine-stream] ü§ñ Starting Claude stream...')
408c447
<     console.log(`[dev-chat-engine-stream] ‚úÖ Stream completed in ${claudeTime}ms (${fullResponse.length} chars)`)
---
>     console.log(`[public-chat-engine-stream] ‚úÖ Stream completed in ${claudeTime}ms (${fullResponse.length} chars)`)
411c450
<     await updateDevSession(session.session_id, message, fullResponse)
---
>     await updatePublicSession(session.session_id, message, fullResponse)
414c453
<     console.log(`[dev-chat-engine-stream] ‚úÖ Total time: ${totalTime}ms`)
---
>     console.log(`[public-chat-engine-stream] ‚úÖ Total time: ${totalTime}ms`)
417,418c456,457
<     console.error('[dev-chat-engine-stream] Error:', error)
<     yield '¬°Hola! Disculpa, tuve un problema procesando tu mensaje. ¬øPodr√≠as intentarlo de nuevo?'
---
>     console.error('[public-chat-engine-stream] Error:', error)
>     throw error
421,461d459
< 
< // ============================================================================
< // Suggestion Generation
< // ============================================================================
< 
< /**
<  * Generate contextual follow-up suggestions
<  */
< function generateDevSuggestions(
<   searchResults: VectorSearchResult[]
< ): string[] {
<   const suggestions: string[] = []
< 
<   // Strategy 1: Result-based suggestions
<   const hasAccommodations = searchResults.some((r) => r.table === 'accommodation_units_public')
<   const hasPolicies = searchResults.some((r) => r.table === 'policies')
<   const hasMuva = searchResults.some((r) => r.table === 'muva_content')
< 
<   if (hasAccommodations) {
<     suggestions.push('Comparar precios de todas las opciones')
<     suggestions.push('¬øTienen cocina completa?')
<   }
< 
<   if (hasMuva && !hasAccommodations) {
<     suggestions.push('Volver a opciones de alojamiento')
<   }
< 
<   if (hasPolicies) {
<     suggestions.push('¬øCu√°l es la pol√≠tica de cancelaci√≥n?')
<   }
< 
<   // Strategy 3: Generic helpful suggestions
<   if (suggestions.length < 3) {
<     suggestions.push('¬øQu√© incluye el precio?')
<     suggestions.push('¬øCu√°l tiene la mejor vista al mar?')
<     suggestions.push('¬øQu√© hay cerca del hotel?')
<   }
< 
<   // Return top 3 unique suggestions
<   return Array.from(new Set(suggestions)).slice(0, 3)
< }
