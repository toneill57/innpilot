openapi: 3.0.3
info:
  title: InnPilot API
  description: |
    InnPilot API para gestión SIRE (Sistema de Información y Registro de Extranjeros) de Colombia.

    Esta API proporciona endpoints para:
    - Chat asistente especializado en SIRE
    - Validación de archivos SIRE
    - Monitoreo del sistema

    ## Authentication
    Currently, the API does not require authentication for public endpoints.

    ## Rate Limiting
    Rate limiting may apply to protect against abuse.

    ## Error Handling
    All endpoints return standard HTTP status codes with JSON error responses.
  version: 0.1.0
  contact:
    name: InnPilot Support
    email: support@innpilot.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://innpilot.vercel.app
    description: Production server
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Chat
    description: AI chat assistant for SIRE inquiries
  - name: Validation
    description: SIRE file validation services
  - name: Health
    description: System health and monitoring
  - name: Status
    description: Advanced system status and metrics

paths:
  /api/chat:
    post:
      tags:
        - Chat
      summary: Send message to SIRE chat assistant
      description: |
        Send a question to the AI chat assistant specialized in SIRE procedures,
        validations, and Colombian hotel regulations.

        The assistant can help with:
        - SIRE procedures and requirements
        - Document validation questions
        - Field specifications
        - Error troubleshooting
      operationId: sendChatMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
              properties:
                question:
                  type: string
                  description: Question about SIRE procedures or regulations
                  example: "¿Cuáles son los 7 pasos oficiales para reportar información al SIRE?"
                  maxLength: 500
                use_context:
                  type: boolean
                  description: Whether to use knowledge base context
                  default: true
                max_context_chunks:
                  type: integer
                  description: Maximum number of context chunks to retrieve
                  default: 4
                  minimum: 1
                  maximum: 10
                conversation_history:
                  type: array
                  description: Previous conversation messages for context
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum: [user, assistant]
                      content:
                        type: string
      responses:
        '200':
          description: Successful response with assistant's answer
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    description: Assistant's response (may include Markdown formatting)
                    example: "Los 7 pasos oficiales para reportar información al SIRE son:\n\n1. **Preparar la base de datos** siguiendo el formato oficial..."
                  context_used:
                    type: boolean
                    description: Whether knowledge base context was used
                  question:
                    type: string
                    description: Original question
        '400':
          description: Bad request - invalid or missing question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error al generar respuesta"
                  details:
                    type: string
                    example: "Claude API timeout"
                  timestamp:
                    type: string
                    format: date-time
                  response_time:
                    type: number
                    description: Request processing time in milliseconds

  /api/validate:
    post:
      tags:
        - Validation
      summary: Validate SIRE file format
      description: |
        Validate a SIRE file for compliance with Colombian hotel guest registry requirements.

        The validation checks:
        - File format (must be .txt)
        - File size (max 10MB)
        - Field count (exactly 13 fields per record)
        - Data types and formats
        - Document type codes
        - Date formats
      operationId: validateSireFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: SIRE file to validate (.txt format, max 10MB)
      responses:
        '200':
          description: Validation completed (may contain errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
                    description: Whether the file passed validation
                  errors:
                    type: array
                    description: List of validation errors found
                    items:
                      type: string
                    example:
                      - "Error en línea 3: Tipo de documento inválido '99'"
                      - "Error en línea 5: Fecha mal formateada"
                  lineCount:
                    type: integer
                    description: Total number of lines processed
                    example: 150
                  fileName:
                    type: string
                    description: Name of the uploaded file
                    example: "registro_huespedes_enero.txt"
                  fileSize:
                    type: integer
                    description: File size in bytes
                    example: 45678
        '400':
          description: Bad request - invalid file or parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid file type"
                  message:
                    type: string
                    example: "Only .txt files are allowed"
        '500':
          description: Internal server error during validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/health:
    get:
      tags:
        - Health
      summary: Basic health check
      description: |
        Simple health check endpoint that returns system status and basic metrics.

        This endpoint checks:
        - Supabase database connectivity
        - API key configuration
        - Basic system health
      operationId: getHealth
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy]
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  services:
                    type: object
                    properties:
                      supabase:
                        $ref: '#/components/schemas/ServiceHealth'
                      openai:
                        $ref: '#/components/schemas/ServiceConfig'
                      anthropic:
                        $ref: '#/components/schemas/ServiceConfig'
                  environment:
                    type: object
                    properties:
                      runtime:
                        type: string
                        example: "edge"
                      region:
                        type: string
                        example: "iad1"
                      deployment:
                        type: string
                        example: "production"

  /api/status:
    get:
      tags:
        - Status
      summary: Advanced system status and metrics
      description: |
        Comprehensive system status endpoint with detailed metrics and service health.

        This endpoint provides:
        - Detailed service health checks
        - System metrics and performance data
        - Deployment information
        - Cache status
      operationId: getSystemStatus
      responses:
        '200':
          description: System is fully healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '206':
          description: System is degraded but functional
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        details:
          type: string
          description: Detailed error information
        timestamp:
          type: string
          format: date-time
          description: When the error occurred

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        responseTime:
          type: string
          example: "245ms"
        error:
          type: string
          description: Error message if unhealthy

    ServiceConfig:
      type: object
      properties:
        status:
          type: string
          enum: [configured, unconfigured]

    ServiceStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
        responseTime:
          type: string
          example: "123ms"
        error:
          type: string
          description: Error message if not healthy
        lastCheck:
          type: string
          format: date-time

    SystemMetrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        memory:
          type: object
          properties:
            used:
              type: number
            total:
              type: number
            percentage:
              type: number
        uptime:
          type: number
          description: System uptime in seconds

    SystemStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
        version:
          type: string
          example: "0.1.0"
        environment:
          type: string
          example: "production"
        timestamp:
          type: string
          format: date-time
        services:
          type: object
          properties:
            supabase:
              $ref: '#/components/schemas/ServiceStatus'
            openai:
              $ref: '#/components/schemas/ServiceStatus'
            anthropic:
              $ref: '#/components/schemas/ServiceStatus'
            cache:
              $ref: '#/components/schemas/ServiceStatus'
        metrics:
          $ref: '#/components/schemas/SystemMetrics'
        deployment:
          type: object
          properties:
            region:
              type: string
              example: "iad1"
            commit:
              type: string
              example: "abc1234"
            buildTime:
              type: string
              example: "2024-01-15T10:30:00Z"

  examples:
    ChatQuestion:
      value:
        question: "¿Cuáles son los documentos válidos para SIRE?"
        use_context: true
        max_context_chunks: 4

    ChatResponse:
      value:
        response: "Los documentos válidos para el SIRE son:\n\n- **Código 3**: Pasaporte\n- **Código 5**: Cédula de extranjería\n- **Código 46**: Carné diplomático\n- **Código 10**: Documento extranjero\n\nEstos son los únicos códigos aceptados oficialmente."
        context_used: true
        question: "¿Cuáles son los documentos válidos para SIRE?"

    ValidationSuccess:
      value:
        isValid: true
        errors: []
        lineCount: 150
        fileName: "registro_enero.txt"
        fileSize: 45678

    ValidationErrors:
      value:
        isValid: false
        errors:
          - "Error en línea 3: Tipo de documento inválido '99'"
          - "Error en línea 5: Fecha mal formateada 'abc/def/2024'"
          - "Error en línea 8: Campo nacionalidad vacío"
        lineCount: 150
        fileName: "registro_enero.txt"
        fileSize: 45678