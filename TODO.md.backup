# TODO - Guest Chat Test Data Alignment

**Proyecto:** Alineaciï¿½n de Datos de Prueba para Guest Chat
**Fecha:** Octubre 1, 2025
**Estimaciï¿½n Total:** 70 minutos

---

## FASE 1: Correcciï¿½n de Tenant IDs (15 min)

### Tareas de Correcciï¿½n

- [x] **FASE 1.1: Ejecutar UPDATE batch de tenant_id** (5 min)
  - **Descripciï¿½n:** Cambiar `tenant_id` de "ONEILL SAID SAS" ï¿½ `b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf`
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf'
    WHERE tenant_id = 'ONEILL SAID SAS';
    ```
  - **Archivos:** Database `guest_reservations` (8 UPDATEs)
  - **Agente:** database-agent
  - **Test:**
    ```sql
    SELECT COUNT(*) FROM guest_reservations
    WHERE tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf';
    -- Debe retornar: 9 (8 corregidas + 1 que ya estaba correcta)
    ```

- [x] **FASE 1.2: Validar que no quedan tenant_id tipo string** (3 min)
  - **Descripciï¿½n:** Verificar que todos los tenant_id son UUIDs vï¿½lidos
  - **Query:**
    ```sql
    SELECT id, tenant_id, guest_name
    FROM guest_reservations
    WHERE tenant_id NOT IN (SELECT tenant_id::text FROM tenant_registry);
    -- Debe retornar: 0 rows
    ```
  - **Archivos:** N/A (solo lectura)
  - **Agente:** database-agent
  - **Criterio de ï¿½xito:** 0 rows retornadas

- [x] **FASE 1.3: Validar integridad de FK con chat_conversations** (5 min)
  - **Descripciï¿½n:** Confirmar que las conversaciones siguen accesibles despuï¿½s del UPDATE
  - **Query:**
    ```sql
    SELECT
      gr.id as reservation_id,
      gr.guest_name,
      gr.tenant_id,
      COUNT(cc.id) as conversation_count
    FROM guest_reservations gr
    LEFT JOIN chat_conversations cc ON cc.reservation_id = gr.id
    WHERE gr.tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf'
    GROUP BY gr.id, gr.guest_name, gr.tenant_id
    ORDER BY gr.guest_name;
    -- Debe mostrar: conversaciones asociadas sin errores
    ```
  - **Archivos:** N/A (solo lectura)
  - **Agente:** database-agent
  - **Criterio de ï¿½xito:** No foreign key violations, conversaciones accesibles

- [x] **FASE 1.4: Documentar cambios en docs/fase-1/** (2 min)
  - **Descripciï¿½n:** Crear documentaciï¿½n de lo implementado
  - **Archivos:**
    - `docs/guest-chat-test-data-setup/fase-1/IMPLEMENTATION.md` âœ…
    - `docs/guest-chat-test-data-setup/fase-1/CHANGES.md` âœ…
    - `docs/guest-chat-test-data-setup/fase-1/TESTS.md` âœ…
  - **Agente:** Humano (o documentation-template-applier si disponible)
  - **Test:** Archivos creados y completos âœ…

---

## FASE 2: Asignaciï¿½n de Accommodation Units (20 min)

### Pre-validaciï¿½n

- [x] **FASE 2.1: Auditar hotel_id en accommodation_units** (3 min)
  - **Descripciï¿½n:** Verificar quï¿½ unidades tienen hotel_id NULL o incorrecto
  - **Query:**
    ```sql
    SELECT
      id,
      name,
      hotel_id,
      tenant_id,
      CASE
        WHEN hotel_id IS NULL THEN 'L Falta hotel_id'
        WHEN hotel_id = '238845ed-8c5b-4d33-9866-bb4e706b90b2' THEN ' Correcto'
        ELSE 'ï¿½ hotel_id incorrecto'
      END as status
    FROM accommodation_units
    WHERE tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf'
    ORDER BY name;
    ```
  - **Archivos:** N/A (solo lectura)
  - **Agente:** database-agent
  - **Test:** Identificar unidades que necesitan correcciï¿½n

- [x] **FASE 2.2: Actualizar hotel_id en unidades faltantes** (4 min)
  - **Descripciï¿½n:** Asignar `hotel_id` correcto a unidades sin hotel
  - **Query:**
    ```sql
    UPDATE accommodation_units
    SET hotel_id = '238845ed-8c5b-4d33-9866-bb4e706b90b2'
    WHERE tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf'
    AND hotel_id IS NULL;
    ```
  - **Archivos:** Database `accommodation_units` (hasta 8 UPDATEs)
  - **Agente:** database-agent
  - **Test:**
    ```sql
    SELECT COUNT(*) FROM accommodation_units
    WHERE tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf'
    AND hotel_id IS NULL;
    -- Debe retornar: 0
    ```

### Asignaciï¿½n de Unidades a Reservas

- [x] **FASE 2.3: Asignar RSV001 ï¿½ Suite Ocean View** (1 min)
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET accommodation_unit_id = '43ff96da-dbef-4757-88e5-31f7618edd33'
    WHERE reservation_code = 'RSV001';
    ```
  - **Archivos:** Database `guest_reservations`
  - **Agente:** database-agent

- [x] **FASE 2.4: Asignar RSV002 ï¿½ Sunshine** (1 min)
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET accommodation_unit_id = 'ed0c8645-ba0a-4004-8a12-3f6fadcf7f26'
    WHERE reservation_code = 'RSV002';
    ```
  - **Archivos:** Database `guest_reservations`
  - **Agente:** database-agent

- [x] **FASE 2.5: Asignar RSV003 ï¿½ Simmer Highs** (1 min)
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET accommodation_unit_id = 'dbaf779f-ac2f-41e0-9056-3fb4bdbdfbe9'
    WHERE reservation_code = 'RSV003';
    ```
  - **Archivos:** Database `guest_reservations`
  - **Agente:** database-agent

- [x] **FASE 2.6: Asignar RSV004 ï¿½ One Love** (1 min)
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET accommodation_unit_id = '6aadbad2-df24-4dbe-a1f8-c4c55defe5c8'
    WHERE reservation_code = 'RSV004';
    ```
  - **Archivos:** Database `guest_reservations`
  - **Agente:** database-agent

- [x] **FASE 2.7: Asignar RSV005 ï¿½ Misty Morning** (1 min)
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET accommodation_unit_id = 'd6d8534d-632e-4baf-ae18-a5ef60d9be6d'
    WHERE reservation_code = 'RSV005';
    ```
  - **Archivos:** Database `guest_reservations`
  - **Agente:** database-agent

- [x] **FASE 2.8: Asignar RSV006 ï¿½ Natural Mystic** (1 min)
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET accommodation_unit_id = 'da357e13-a06e-4ef0-b0a1-3e9b453ba1ef'
    WHERE reservation_code = 'RSV006';
    ```
  - **Archivos:** Database `guest_reservations`
  - **Agente:** database-agent

- [x] **FASE 2.9: Asignar RSV007 ï¿½ Dreamland** (1 min)
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET accommodation_unit_id = 'e0e8e004-74a4-416e-999f-b746265c7fd9'
    WHERE reservation_code = 'RSV007';
    ```
  - **Archivos:** Database `guest_reservations`
  - **Agente:** database-agent

- [x] **FASE 2.10: Asignar RSV008 ï¿½ Kaya** (1 min)
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET accommodation_unit_id = '6c341cf7-cb12-46cb-a5c7-b67169293059'
    WHERE reservation_code = 'RSV008';
    ```
  - **Archivos:** Database `guest_reservations`
  - **Agente:** database-agent

- [x] **FASE 2.11: Asignar TEST001 ï¿½ Summertime** (1 min)
  - **Query:**
    ```sql
    UPDATE guest_reservations
    SET accommodation_unit_id = 'adb97f6f-4791-49d1-90d5-8275c8c08aad'
    WHERE reservation_code = 'TEST001';
    ```
  - **Archivos:** Database `guest_reservations`
  - **Agente:** database-agent

### Validaciï¿½n de Asignaciones

- [x] **FASE 2.12: Validar que no quedan accommodation_unit_id NULL** (2 min)
  - **Query:**
    ```sql
    SELECT id, guest_name, reservation_code, accommodation_unit_id
    FROM guest_reservations
    WHERE tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf'
    AND accommodation_unit_id IS NULL;
    -- Debe retornar: 0 rows
    ```
  - **Archivos:** N/A (solo lectura)
  - **Agente:** database-agent
  - **Criterio de ï¿½xito:** 0 rows retornadas

- [x] **FASE 2.13: Validar unicidad (no duplicados)** (2 min)
  - **Query:**
    ```sql
    SELECT
      accommodation_unit_id,
      COUNT(*) as reservation_count,
      STRING_AGG(guest_name, ', ') as guests
    FROM guest_reservations
    WHERE status = 'active'
    AND tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf'
    GROUP BY accommodation_unit_id
    HAVING COUNT(*) > 1;
    -- Debe retornar: 0 rows (no duplicados)
    ```
  - **Archivos:** N/A (solo lectura)
  - **Agente:** database-agent
  - **Criterio de ï¿½xito:** 0 rows retornadas (cada unidad asignada a mï¿½ximo 1 reserva)

- [x] **FASE 2.14: Documentar cambios en docs/fase-2/** (2 min)
  - **Archivos:**
    - `docs/guest-chat-test-data-setup/fase-2/IMPLEMENTATION.md` âœ…
    - `docs/guest-chat-test-data-setup/fase-2/CHANGES.md` âœ…
    - `docs/guest-chat-test-data-setup/fase-2/TESTS.md` âœ…
  - **Agente:** Humano (o documentation-template-applier)
  - **Test:** Archivos creados y completos âœ…

---

## FASE 3: Validaciï¿½n de Datos de Unidades (15 min)

### Audit de Datos

- [x] **FASE 3.1: Ejecutar audit de datos requeridos** (5 min)
  - **Descripciï¿½n:** Verificar completitud de datos en accommodation_units
  - **Query:**
    ```sql
    SELECT
      id,
      name,
      CASE WHEN description IS NULL OR description = '' THEN 'L' ELSE '' END as has_description,
      CASE WHEN embedding_fast IS NULL THEN 'L' ELSE '' END as has_fast_embedding,
      CASE WHEN embedding_balanced IS NULL THEN 'L' ELSE '' END as has_balanced_embedding,
      CASE WHEN short_description IS NULL OR short_description = '' THEN 'ï¿½' ELSE '' END as has_short_desc,
      CASE WHEN tourism_features IS NULL THEN 'ï¿½' ELSE '' END as has_features
    FROM accommodation_units
    WHERE tenant_id = 'b5c45f51-a333-4cdf-ba9d-ad0a17bf79bf'
    ORDER BY name;
    ```
  - **Archivos:** N/A (solo lectura)
  - **Agente:** database-agent
  - **Test:** Identificar unidades con datos faltantes

- [ ] **FASE 3.2: Analizar resultados del audit** (3 min)
  - **Descripciï¿½n:** Decidir si se necesita generar embeddings o completar datos
  - **Opciones:**
    - Si faltan embeddings ï¿½ Ejecutar FASE 3.3
    - Si faltan descriptions ï¿½ Documentar en ISSUES.md (Next Steps)
  - **Archivos:** N/A (anï¿½lisis)
  - **Agente:** Humano (decisiï¿½n)

- [ ] **FASE 3.3: Generar embeddings faltantes (si necesario)** (5 min)
  - **Descripciï¿½n:** Si las unidades no tienen embeddings, generarlos
  - **Opciones:**
    1. Adaptar script existente: `node scripts/populate-embeddings.js`
    2. Ejecutar queries manuales con OpenAI API
    3. Documentar como "blocker" si no es crï¿½tico
  - **Archivos:**
    - Potencialmente: nuevo script en `scripts/generate-accommodation-embeddings.js`
    - Database: `accommodation_units` (UPDATEs de embeddings)
  - **Agente:** backend-developer (si se requiere script nuevo)
  - **Test:** Re-ejecutar query de FASE 3.1 y verificar  en embeddings

- [ ] **FASE 3.4: Documentar estado de datos** (2 min)
  - **Descripciï¿½n:** Crear reporte de audit con hallazgos
  - **Archivos:**
    - `docs/guest-chat-test-data-setup/fase-3/IMPLEMENTATION.md` (audit results)
    - `docs/guest-chat-test-data-setup/fase-3/CHANGES.md` (embeddings generados, si aplica)
    - `docs/guest-chat-test-data-setup/fase-3/TESTS.md` (validaciones ejecutadas)
    - `docs/guest-chat-test-data-setup/fase-3/ISSUES.md` (datos faltantes no crï¿½ticos)
  - **Agente:** Humano (o documentation-template-applier)
  - **Test:** Archivos creados y completos

---

## FASE 4: Testing del Flujo Completo (20 min)

### Setup del Testing

- [ ] **FASE 4.1: Iniciar development server** (2 min)
  - **Comando:**
    ```bash
    ./scripts/dev-with-keys.sh
    ```
  - **Archivos:** N/A
  - **Agente:** Humano
  - **Test:** Server running en `http://localhost:3000`

- [ ] **FASE 4.2: Abrir Guest Chat en navegador** (1 min)
  - **Comando:**
    ```bash
    open http://localhost:3000/guest-chat/simmerdown
    ```
  - **Archivos:** N/A
  - **Agente:** Humano
  - **Test:** Pï¿½gina carga correctamente

### Login Testing

- [ ] **FASE 4.3: Test Login - Marï¿½a Gonzï¿½lez (Suite Ocean View)** (3 min)
  - **Datos:**
    - Nombre completo: Marï¿½a Gonzï¿½lez
    - ï¿½ltimos 4 dï¿½gitos: 4567
  - **Test:**
    1. Ingresar datos en formulario
    2. Verificar login exitoso
    3. Screenshot del dashboard
  - **Criterio de ï¿½xito:** Login exitoso, conversation_id generado
  - **Archivos:** `docs/guest-chat-test-data-setup/fase-4/screenshots/login-maria.png`
  - **Agente:** Humano

- [ ] **FASE 4.4: Test Login - Luis Martï¿½nez (One Love)** (3 min)
  - **Datos:**
    - Nombre completo: Luis Martï¿½nez
    - ï¿½ltimos 4 dï¿½gitos: 3344
  - **Test:** (mismo proceso que FASE 4.3)
  - **Archivos:** `docs/guest-chat-test-data-setup/fase-4/screenshots/login-luis.png`
  - **Agente:** Humano

- [ ] **FASE 4.5: Test Login - Carmen Silva (Dreamland)** (3 min)
  - **Datos:**
    - Nombre completo: Carmen Silva
    - ï¿½ltimos 4 dï¿½gitos: 7788
  - **Test:** (mismo proceso que FASE 4.3)
  - **Archivos:** `docs/guest-chat-test-data-setup/fase-4/screenshots/login-carmen.png`
  - **Agente:** Humano

### Context Retrieval Testing

- [ ] **FASE 4.6: Test Context Retrieval - Suite Ocean View** (2 min)
  - **Setup:** Sesiï¿½n de Marï¿½a Gonzï¿½lez
  - **Query en chat:** "ï¿½Quï¿½ caracterï¿½sticas tiene mi habitaciï¿½n?"
  - **Validaciï¿½n:**
    - Respuesta menciona "Suite Ocean View"
    - Sources incluyen datos de accommodation_unit
  - **Test:** Screenshot de respuesta + metadata
  - **Archivos:** `docs/guest-chat-test-data-setup/fase-4/screenshots/context-suite-ocean-view.png`
  - **Agente:** Humano

- [ ] **FASE 4.7: Test Context Retrieval - One Love** (2 min)
  - **Setup:** Sesiï¿½n de Luis Martï¿½nez
  - **Query:** "ï¿½Cuï¿½l es la vista desde mi alojamiento?"
  - **Validaciï¿½n:** Respuesta relevante a "One Love"
  - **Archivos:** `docs/guest-chat-test-data-setup/fase-4/screenshots/context-one-love.png`
  - **Agente:** Humano

- [ ] **FASE 4.8: Test Context Retrieval - Dreamland** (2 min)
  - **Setup:** Sesiï¿½n de Carmen Silva
  - **Query:** "ï¿½Quï¿½ amenities tiene mi habitaciï¿½n?"
  - **Validaciï¿½n:** Respuesta relevante a "Dreamland"
  - **Archivos:** `docs/guest-chat-test-data-setup/fase-4/screenshots/context-dreamland.png`
  - **Agente:** Humano

### Memoria Persistente Testing

- [ ] **FASE 4.9: Test Conversational Memory** (2 min)
  - **Setup:** Cualquier sesiï¿½n activa (ej. Marï¿½a Gonzï¿½lez)
  - **Queries:**
    1. "ï¿½Quï¿½ caracterï¿½sticas tiene mi habitaciï¿½n?"
    2. "ï¿½Y quï¿½ mï¿½s tiene?" (debe recordar contexto de pregunta 1)
    3. "ï¿½Estï¿½ cerca de la playa?" (debe mantener contexto)
  - **Validaciï¿½n:** Respuestas coherentes y contextuales
  - **Test:** Screenshot de conversaciï¿½n completa
  - **Archivos:** `docs/guest-chat-test-data-setup/fase-4/screenshots/memory-test.png`
  - **Agente:** Humano

### Documentaciï¿½n Final

- [ ] **FASE 4.10: Crear TESTING_RESULTS.md** (3 min)
  - **Contenido:**
    - Resumen de tests ejecutados
    - Resultados por cada reserva probada
    - Screenshots adjuntos
    - Issues encontrados (si los hay)
  - **Archivos:** `docs/guest-chat-test-data-setup/fase-4/TESTING_RESULTS.md`
  - **Agente:** Humano

- [ ] **FASE 4.11: Documentar issues y recomendaciones** (2 min)
  - **Archivos:**
    - `docs/guest-chat-test-data-setup/fase-4/ISSUES.md` (problemas encontrados)
    - `docs/guest-chat-test-data-setup/fase-4/RECOMMENDATIONS.md` (mejoras sugeridas)
  - **Agente:** Humano

---

## Resumen de Progreso

### FASE 1 (15 min)
- [x] 4/4 tareas completadas âœ… (1.1 âœ…, 1.2 âœ…, 1.3 âœ…, 1.4 âœ… COMPLETA)

### FASE 2 (20 min)
- [x] 14/14 tareas completadas âœ… COMPLETA (2.1-2.14 âœ…)

### FASE 3 (15 min)
- [ ] 1/4 tareas completadas (3.1 âœ…, 3.2-3.4 pendientes)

### FASE 4 (20 min)
- [ ] 0/11 tareas completadas (testing manual pendiente)

### **TOTAL: 19/33 tareas completadas (57.6%)**

**âœ… DATOS CORREGIDOS:**
- 9/9 reservas con tenant_id correcto
- 9/9 reservas con accommodation_unit_id asignado
- 9/9 accommodation_units con hotel_id
- 8/9 unidades con embeddings completos (Suite Ocean View sin embeddings)

---

## Notas Importantes

ï¿½ **Antes de marcar con [x]:**
- DEBE ejecutarse el test especificado
- DEBE pasar el criterio de ï¿½xito
- DEBE documentarse en docs/ si aplica

 **Solo marcar [x] cuando:**
- Test ejecutado y pasï¿½
- Sin errores de FK violations
- Documentaciï¿½n creada (si aplica)

=ï¿½ **Agentes Responsables:**
- **database-agent**: Todas las queries SQL, validaciones DB
- **backend-developer**: Scripts de embeddings (si necesario)
- **Humano**: Testing manual, screenshots, documentaciï¿½n final

---

**ï¿½ltima actualizaciï¿½n:** Octubre 1, 2025 - 18:00 (Fases 1-2 COMPLETAS con documentaciï¿½n âœ…, Fase 3 en progreso)
