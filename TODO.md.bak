# TODO - Guest Portal Multi-Conversation + Compliance Module

**Proyecto:** Guest Portal Multi-Conversation Architecture with Integrated Compliance
**Fecha:** 5 de Octubre 2025
**Plan:** Ver `plan.md` para contexto completo (1000+ l�neas)

---

## FASE 1: Subdomain Infrastructure < (3-4h)

### 1.1 Configurar DNS Wildcard
- [x] Configurar DNS wildcard en Hostinger (completado: 30min)
  - Login a Hostinger DNS panel ✅
  - Crear record: `*.innpilot.io A 195.200.6.216` ✅
  - TTL: 86400 (24h)
  - Propagación completa (verificado con Google DNS 8.8.8.8)
  - Files: N/A (Hostinger panel)
  - Agent: **backend-developer**
  - Test: `host simmerdown.innpilot.io` → 195.200.6.216 ✅

### 1.2 Configurar SSL Wildcard
- [x] Instalar Let's Encrypt wildcard SSL (completado: 45min)
  - SSH al VPS: `ssh root@innpilot.io` ✅
  - Comando: `sudo certbot certonly --manual --preferred-challenges dns -d *.innpilot.io -d innpilot.io` ✅
  - TXT record agregado en Hostinger: `_acme-challenge.innpilot.io` ✅
  - Certificate instalado: `/etc/letsencrypt/live/innpilot.io-0001/` ✅
  - Válido hasta: 2026-01-03 (3 meses)
  - Auto-renovación: `certbot.timer` activo (2x/day) ✅
  - Coverage: `*.innpilot.io` + `innpilot.io`
  - Files: `/etc/letsencrypt/live/innpilot.io-0001/fullchain.pem`
  - Agent: **backend-developer**
  - Test: `openssl x509 -in /etc/letsencrypt/live/innpilot.io-0001/fullchain.pem -text | grep -A2 "Subject Alternative Name"` → DNS:*.innpilot.io, DNS:innpilot.io ✅

### 1.3 Configurar Nginx subdomain routing
- [x] Crear nginx-subdomain.conf (completado: 1h)
  - Crear archivo: `docs/deployment/nginx-subdomain.conf` ✅
  - Detectar subdomain del request header `Host` ✅
  - Agregar custom header: `X-Tenant-Subdomain: simmerdown` ✅
  - Proxy pass a Next.js (localhost:3000) ✅
  - SSL configuration ✅
  - Copiar a VPS: `/etc/nginx/sites-available/nginx-subdomain.conf` ✅
  - Symlink: `ln -sf /etc/nginx/sites-available/nginx-subdomain.conf /etc/nginx/sites-enabled/` ✅
  - Test nginx: `sudo nginx -t` → syntax OK ✅
  - Reload: `sudo systemctl reload nginx` ✅
  - Files: `docs/deployment/nginx-subdomain.conf` (96 líneas)
  - Agent: **backend-developer**
  - Test: `curl -I https://simmerdown.innpilot.io` → HTTP/2 200 OK ✅

### 1.4 Crear subdomain setup guide
- [x] Documentar proceso completo de subdomain setup (completado: 30min)
  - Paso 1: DNS configuration ✅
  - Paso 2: SSL certificate ✅
  - Paso 3: Nginx configuration ✅
  - Paso 4: Testing ✅
  - Troubleshooting tips (7 escenarios comunes) ✅
  - Files: `docs/deployment/SUBDOMAIN_SETUP_GUIDE.md` (600+ líneas)
  - Agent: **backend-developer**
  - Test: Guía completa, copy-paste ready, troubleshooting incluido ✅

### 1.5 Implementar Next.js middleware subdomain detection
- [ ] Modificar src/middleware.ts para detectar subdomain (estimate: 45min)
  - Leer header `X-Tenant-Subdomain` del request
  - Si existe, guardar en cookie: `tenant_subdomain=simmerdown`
  - Si no existe, intentar parsear del hostname
  - Fallback a path-based tenant resolution
  - Files: `src/middleware.ts`
  - Agent: **backend-developer**
  - Test: Cookie `tenant_subdomain` set correctamente

### 1.6 Enhance tenant resolver con subdomain support
- [ ] Modificar src/lib/tenant-resolver.ts (estimate: 30min)
  - Agregar funci�n `resolveSubdomainToTenantId(subdomain: string)`
  - Cache por subdomain (Map<subdomain, tenant_id>, TTL 5min)
  - Query: `SELECT tenant_id FROM tenant_registry WHERE slug = subdomain`
  - Fallback a UUID resolution si subdomain no existe
  - Files: `src/lib/tenant-resolver.ts`
  - Agent: **backend-developer**
  - Test: `resolveSubdomainToTenantId('simmerdown')` � UUID correcto

---

## FASE 2: Multi-Conversation Foundation =� (6-8h)

### 2.1 Database: Crear guest_conversations table
- [ ] Migration: guest_conversations (estimate: 30min)
  - CREATE TABLE con columns: id, guest_id, tenant_id, title, last_message, created_at, updated_at
  - Foreign keys: guest_id � guest_reservations(id), tenant_id � tenant_registry(tenant_id)
  - Indexes: guest_id, tenant_id
  - Files: `supabase/migrations/20251005010000_add_guest_conversations.sql`
  - Agent: **database-agent**
  - Test: `npx supabase migration show` � migration visible

### 2.2 Database: RLS policies para guest_conversations
- [ ] RLS policies (estimate: 30min)
  - ENABLE ROW LEVEL SECURITY
  - Policy "Guests can view their own conversations"
  - Policy "Guests can create their own conversations"
  - Policy "Guests can update their own conversations"
  - Policy "Guests can delete their own conversations"
  - Files: `supabase/migrations/20251005010000_add_guest_conversations.sql`
  - Agent: **database-agent**
  - Test: Guest no puede ver conversaciones de otro guest

### 2.3 Database: Crear compliance_submissions table
- [ ] Migration: compliance_submissions (estimate: 30min)
  - CREATE TABLE con columns: id, guest_id, tenant_id, type, status, data, sire_response, tra_response, error_message, submitted_at, submitted_by
  - Indexes: guest_id, tenant_id, status
  - CHECK constraints: type IN ('sire', 'tra', 'both'), status IN ('pending', 'processing', 'success', 'failed')
  - Files: `supabase/migrations/20251005010100_add_compliance_submissions.sql`
  - Agent: **database-agent**
  - Test: Migration aplica sin errores

### 2.4 Database: Crear tenant_compliance_credentials table
- [ ] Migration: tenant_compliance_credentials (estimate: 30min)
  - CREATE TABLE con columns: id, tenant_id, sire_username, sire_password_encrypted, tra_rnt_token, created_at, updated_at
  - UNIQUE constraint en tenant_id
  - Files: `supabase/migrations/20251005010200_add_tenant_compliance_credentials.sql`
  - Agent: **database-agent**
  - Test: Tabla creada, UNIQUE constraint funciona

### 2.5 Backend API: POST /api/guest/conversations
- [ ] Crear endpoint para nueva conversaci�n (estimate: 45min)
  - Autenticaci�n: JWT guest token
  - Body: `{ title?: string }`
  - Auto-generate title si no provided
  - Insert en guest_conversations table
  - Return conversation_id, title, created_at
  - Files: `src/app/api/guest/conversations/route.ts`
  - Agent: **backend-developer**
  - Test: `curl -X POST /api/guest/conversations -H "Authorization: Bearer TOKEN"` � 201 Created

### 2.6 Backend API: GET /api/guest/conversations
- [ ] Crear endpoint para listar conversaciones (estimate: 30min)
  - Autenticaci�n: JWT guest token
  - Query desde guest_conversations WHERE guest_id = session.guest_id
  - Order by updated_at DESC
  - Return array de conversations
  - Files: `src/app/api/guest/conversations/route.ts`
  - Agent: **backend-developer**
  - Test: `curl /api/guest/conversations -H "Authorization: Bearer TOKEN"` � 200 OK con array

### 2.7 Backend API: PUT /api/guest/conversations/:id
- [ ] Crear endpoint para actualizar t�tulo (estimate: 30min)
  - Autenticaci�n: JWT guest token
  - Body: `{ title: string }`
  - Validation: title no vac�o, max 255 chars
  - Update guest_conversations WHERE id = :id AND guest_id = session.guest_id
  - Return updated conversation
  - Files: `src/app/api/guest/conversations/[id]/route.ts`
  - Agent: **backend-developer**
  - Test: PUT actualiza t�tulo correctamente, no permite cross-guest access

### 2.8 Backend API: DELETE /api/guest/conversations/:id
- [ ] Crear endpoint para eliminar conversaci�n (estimate: 30min)
  - Autenticaci�n: JWT guest token
  - DELETE guest_conversations WHERE id = :id AND guest_id = session.guest_id
  - CASCADE delete chat_messages associated
  - Return { success: true, deleted_id }
  - Files: `src/app/api/guest/conversations/[id]/route.ts`
  - Agent: **backend-developer**
  - Test: DELETE elimina conversaci�n y mensajes, no permite cross-guest access

### 2.9 UI: ConversationList component
- [ ] Crear ConversationList.tsx (copiado de Staff Chat) (estimate: 2h)
  - Features: "Nueva conversaci�n" button, lista de conversations, active highlight, timestamps relativos
  - Empty state: "No conversations yet"
  - Mobile responsive (colapsable drawer)
  - onClick handler para select conversation
  - Referencia: `src/components/Staff/ConversationList.tsx`
  - Files: `src/components/Chat/ConversationList.tsx`
  - Agent: **ux-interface**
  - Test: Component renders correctamente, click selecciona conversaci�n

### 2.10 UI: GuestChatInterface refactor con sidebar
- [ ] Refactor GuestChatInterface.tsx para agregar sidebar (estimate: 3h)
  - Layout: Sidebar (300px desktop, drawer mobile) + Chat area
  - Load conversations on mount (`GET /api/guest/conversations`)
  - "Nueva conversaci�n" functionality (`POST /api/guest/conversations`)
  - Conversation switching (load messages `GET /api/guest/chat/history?conversation_id=X`)
  - Auto-generate conversation titles (from first user message)
  - Mantener entity tracking 
  - Mantener follow-up suggestions 
  - Files: `src/components/Chat/GuestChatInterface.tsx`
  - Agent: **ux-interface**
  - Test: Sidebar visible, switching funciona, entity tracking/follow-ups funcionan

### 2.5 Multi-Modal File Upload (Proof of Concept)
- [ ] 2.5.1 Setup Supabase Storage bucket 'guest-attachments' (estimate: 30min)
  - Create bucket with RLS policies
  - Max 10MB, formats: image/*, application/pdf
  - Files: Supabase dashboard config
  - Agent: **database-agent**
  - Test: Upload file via Supabase UI

- [ ] 2.5.2 Database migration - conversation_attachments table (estimate: 30min)
  - Fields: id, conversation_id, file_url, file_type, ocr_text, vision_analysis
  - Indexes: conversation_id
  - Files: `supabase/migrations/20251005010300_add_conversation_attachments.sql`
  - Agent: **database-agent**
  - Test: npx supabase migration show

- [ ] 2.5.3 Claude Vision API integration (estimate: 1h)
  - Create `src/lib/claude-vision.ts`
  - Function: analyzeImage(imageUrl, prompt)
  - Use cases: Location recognition, passport OCR
  - Files: `src/lib/claude-vision.ts`
  - Agent: **backend-developer**
  - Test: npm test -- src/lib/__tests__/claude-vision.test.ts

- [ ] 2.5.4 Backend API - POST /api/guest/conversations/:id/attachments (estimate: 1h)
  - Upload file → Supabase Storage
  - Call Claude Vision if image
  - Extract passport data if document
  - Files: `src/app/api/guest/conversations/[id]/attachments/route.ts`
  - Agent: **backend-developer**
  - Test: curl -X POST with image file

- [ ] 2.5.5 UI - File upload button (Paperclip icon) (estimate: 1h)
  - Add file input (hidden)
  - Paperclip button trigger
  - Image preview modal
  - Files: `src/components/Chat/GuestChatInterface.tsx`
  - Agent: **ux-interface**
  - Test: Visual - upload foto, preview shown

- [ ] 2.5.6 UI - Vision analysis display (estimate: 30min)
  - Show analysis results in chat
  - Loading state durante API call
  - Error handling
  - Files: `src/components/Chat/GuestChatInterface.tsx`
  - Agent: **ux-interface**
  - Test: Upload image → analysis appears

- [ ] 2.5.7 Testing: Photo location recognition (Simmerdown PoC) (estimate: 30min)
  - Upload foto de Simmerdown
  - Pregunta: "¿Cómo llego a la playa desde aquí?"
  - Verify Vision API recognizes location
  - Agent: **backend-developer**
  - Test: Manual E2E test

- [ ] 2.5.8 Testing: Passport OCR auto-fill compliance (estimate: 30min)
  - Upload foto de pasaporte
  - Verify OCR extracts: passport number, country, birthdate
  - Auto-fill compliance form
  - Agent: **backend-developer**
  - Test: Manual E2E test

### 2.6 Conversation Intelligence
- [ ] 2.6.1 Update guest_conversations schema (estimate: 30min)
  - Add fields: message_count, compressed_history, favorites, is_archived, last_activity_at
  - Modify migration: 20251005010000_add_guest_conversations.sql
  - Files: `supabase/migrations/20251005010000_add_guest_conversations.sql`
  - Agent: **database-agent**
  - Test: npx supabase migration up

- [ ] 2.6.2 Create guest-conversation-memory.ts (estimate: 2h)
  - Function: compactConversationIfNeeded() - umbral 20 mensajes
  - Function: addToFavorites() - capturar sitios de interés
  - Function: suggestNewConversation() - detectar cambio de tema
  - Files: `src/lib/guest-conversation-memory.ts`
  - Agent: **backend-developer**
  - Test: npm test -- src/lib/__tests__/guest-conversation-memory.test.ts

- [ ] 2.6.3 Auto-trigger compactación en POST /api/guest/chat (estimate: 30min)
  - Call compactConversationIfNeeded() after cada mensaje
  - Update message_count
  - Files: `src/app/api/guest/chat/route.ts`
  - Agent: **backend-developer**
  - Test: Send 50 messages → verify 2 bloques compactados

- [ ] 2.6.4 UI - Topic change suggestion banner (estimate: 1h)
  - Detectar 2+ menciones mismo tema
  - Mostrar: "💡 ¿Quieres crear una conversación sobre {tema}?"
  - Buttons: "Sí, crear" | "No, continuar"
  - Files: `src/components/Chat/GuestChatInterface.tsx`
  - Agent: **ux-interface**
  - Test: Mention 'restaurantes' 2 veces → suggestion appears

- [ ] 2.6.5 UI - Favorites section in sidebar (estimate: 30min)
  - Show favorited places/activities
  - Click → insert into chat
  - Files: `src/components/Chat/ConversationList.tsx`
  - Agent: **ux-interface**
  - Test: Add favorite → appears in sidebar

- [ ] 2.6.6 Cron job: Auto-archive conversations (30 días) (estimate: 1h)
  - Create `src/lib/cron/archive-conversations.ts`
  - Vercel Cron daily 2am
  - Mark is_archived=true if last_activity_at > 30 days
  - Files: `src/lib/cron/archive-conversations.ts`, `vercel.json` (cron config)
  - Agent: **backend-developer**
  - Test: Manual trigger cron job

- [ ] 2.6.7 Cron job: Auto-delete archived conversations (90 días) (estimate: 30min)
  - Delete conversations where archived_at > 90 days
  - CASCADE delete messages, attachments
  - Files: `src/lib/cron/archive-conversations.ts`
  - Agent: **backend-developer**
  - Test: Manual trigger with test data

- [ ] 2.6.8 Testing: 50 mensajes → compactación automática (estimate: 30min)
  - Send 50 messages to one conversation
  - Verify compressed_history has 2 bloques
  - Verify only last 10 messages in DB
  - Agent: **backend-developer**
  - Test: npm test -- conversation-memory-integration.test.ts

---

## FASE 3: Compliance Module Integration 📋 (10-12h)

### 3.1 Compliance Engine: compliance-chat-engine.ts
- [ ] Crear compliance-chat-engine.ts con conversational flow (estimate: 3h)
  - State machine: normal � compliance_active � compliance_confirm
  - Entity extraction: pasaporte (regex), pa�s (NER), fecha_nacimiento (date parsing), prop�sito (enum)
  - Data validation (strict): passport format, country valid, date valid, purpose valid
  - Confirmation generation (formatted review message)
  - Pre-fill data from reservation: nombre, check_in, check_out, telefono
  - Files: `src/lib/compliance-chat-engine.ts`
  - Agent: **backend-developer**
  - Test: Entity extraction > 95% accuracy, validation funciona

### 3.2 Intent Detection: Compliance intents en conversational engine
- [ ] Modificar conversational-chat-engine.ts para detectar intents compliance (estimate: 1h)
  - New intents: COMPLIANCE_START, COMPLIANCE_CONFIRM, COMPLIANCE_CANCEL
  - Priority order: 1) COMPLIANCE_CONFIRM (if pending), 2) COMPLIANCE_START, 3) Normal
  - Keywords: ["registro", "sire", "tra", "documentos", "compliance"]
  - Files: `src/lib/conversational-chat-engine.ts`
  - Agent: **backend-developer**
  - Test: Intent detection preciso, no false positives

### 3.3 Backend API: Compliance mode en guest chat
- [ ] Modificar /api/guest/chat/route.ts para manejar compliance mode (estimate: 1h)
  - Detectar si mode = 'compliance_active' o 'normal'
  - Si compliance: usar compliance-chat-engine
  - Si normal: usar conversational-chat-engine (actual)
  - Store compliance_data en session/conversation context
  - Files: `src/app/api/guest/chat/route.ts`
  - Agent: **backend-developer**
  - Test: Mode switching funciona, context persiste

### 3.4 SIRE Push: scripts/sire-push.ts
- [ ] Crear Puppeteer script para SIRE.gov.co (estimate: 3h)
  - Login con tenant credentials (from tenant_compliance_credentials)
  - Navigate to registro form
  - Fill fields usando Tab + Enter navigation
  - Submit form
  - Capture confirmation number (#REF-XXXXX)
  - Screenshot on success (save to /tmp/sire-screenshots/)
  - Screenshot on failure
  - Error handling: timeout (60s), retry logic (max 3 attempts)
  - Log submission to compliance_submissions table
  - Files: `scripts/sire-push.ts`
  - Agent: **backend-developer**
  - Test: Login exitoso, form submission successful, screenshot saved

### 3.5 Credentials Management: Tenant SIRE credentials
- [ ] Crear endpoint para configurar credentials (estimate: 1h)
  - POST /api/admin/compliance/credentials
  - Body: { tenant_id, sire_username, sire_password, tra_rnt_token }
  - Encrypt password con bcrypt antes de guardar
  - Store en tenant_compliance_credentials table
  - Files: `src/app/api/admin/compliance/credentials/route.ts`, `src/lib/crypto-utils.ts`
  - Agent: **backend-developer**
  - Test: Credentials encrypted en DB, decrypt funciona

### 3.6 TRA API: Investigar MinCIT API
- [ ] Investigar API TRA (MinCIT) (estimate: 2h)
  - Endpoint conocido: `https://pms.mincit.gov.co/token/`
  - Descubrir endpoints de submission (POST guest data)
  - Documentar request/response format
  - Test authentication con RNT token
  - Files: `docs/guest-portal-multi-conversation/TRA_API_INVESTIGATION.md`
  - Agent: **api-endpoints-mapper**
  - Test: Endpoints documentados, authentication funciona

### 3.7 TRA API: lib/integrations/tra/client.ts
- [ ] Crear TRA API client (estimate: 2h)
  - Token authentication (RNT-based)
  - Function: `submitGuestData(data: ComplianceData)`
  - Error handling: API errors, network errors, timeout
  - Retry logic (max 3 attempts)
  - Log response to compliance_submissions table
  - Files: `src/lib/integrations/tra/client.ts`, `src/lib/integrations/tra/types.ts`
  - Agent: **backend-developer**
  - Test: Submit exitoso, error handling funciona, retry logic funciona

### 3.8 UI: ComplianceReminder component
- [ ] Crear ComplianceReminder.tsx (banner en sidebar) (estimate: 1h)
  - Suave, no intrusivo (banner en top de sidebar)
  - Dismissible (localStorage: "compliance_reminder_dismissed")
  - "Iniciar registro" button
  - Progress indicator: 0% (red), 50% (yellow), 100% (green checkmark)
  - Auto-hide despu�s de completar
  - Files: `src/components/Chat/ComplianceReminder.tsx`
  - Agent: **ux-interface**
  - Test: Banner visible, dismissible funciona, progress actualiza

### 3.9 UI: ComplianceConfirmation component
- [ ] Crear ComplianceConfirmation.tsx (review modal) (estimate: 1.5h)
  - Modal overlay (full screen en mobile)
  - Review screen con todos los campos (nombre, pasaporte, pa�s, etc.)
  - Editable fields (click to edit inline)
  - CTAs: " Confirmar y Enviar" (green), "L Cancelar" (gray)
  - Loading states: "Enviando a SIRE...", "Enviando a TRA..."
  - Files: `src/components/Chat/ComplianceConfirmation.tsx`
  - Agent: **ux-interface**
  - Test: Modal renders, fields editable, loading states smooth

### 3.10 UI: ComplianceSuccess component
- [ ] Crear ComplianceSuccess.tsx (success screen) (estimate: 1h)
  - Success screen con confetti animation <�
  - Confirmation details: SIRE ref number, TRA confirmation, timestamp
  - "Continuar al chat" button
  - Auto-redirect after 5s
  - Files: `src/components/Chat/ComplianceSuccess.tsx`
  - Agent: **ux-interface**
  - Test: Confetti animates, confirmation details display, auto-redirect funciona

### 3.11 Integration: Connect compliance flow end-to-end
- [ ] Integrar compliance flow completo en GuestChatInterface (estimate: 1h)
  - User clicks "Iniciar registro" � Set mode = 'compliance_active'
  - Conversational data capture (pasaporte, pa�s, etc.)
  - Pre-fill data from reservation
  - Show ComplianceConfirmation modal cuando todos los campos capturados
  - On confirm � Submit to SIRE + TRA
  - Show ComplianceSuccess on success
  - Show error message on failure
  - Files: `src/components/Chat/GuestChatInterface.tsx`
  - Agent: **backend-developer** + **ux-interface**
  - Test: End-to-end flow funciona, SIRE + TRA submissions successful

---

## FASE 4: Staff Notifications & Dashboard =� (3-4h)

### 4.1 Email Notifications: Setup email service
- [ ] Configurar email notification service (estimate: 1h)
  - Use Resend API o similar (ya existe en proyecto?)
  - Email templates: success, failure
  - Function: `sendComplianceNotification(type, data)`
  - Files: `src/lib/email/compliance-notifications.ts`
  - Agent: **backend-developer**
  - Test: Email sent successfully (test email received)

### 4.2 Email Notifications: Trigger on submission
- [ ] Trigger emails on compliance submission (estimate: 30min)
  - On success: Send email con SIRE ref + TRA confirmation
  - On failure: Send email con error message + retry link
  - Include guest name, submission time, data
  - Files: Modificar `scripts/sire-push.ts`, `src/lib/integrations/tra/client.ts`
  - Agent: **backend-developer**
  - Test: Emails triggered on success/failure

### 4.3 Backend API: GET /api/staff/compliance/submissions
- [ ] Crear endpoint para listar submissions (estimate: 1h)
  - Query params: status, from, to, tenant_id
  - Return array de submissions con filters
  - Pagination: limit 50, offset support
  - Order by submitted_at DESC
  - Files: `src/app/api/staff/compliance/submissions/route.ts`
  - Agent: **backend-developer**
  - Test: GET returns submissions, filters work

### 4.4 Backend API: POST /api/staff/compliance/retry
- [ ] Crear endpoint para retry failed submission (estimate: 1h)
  - Body: { submission_id }
  - Re-submit to SIRE + TRA
  - Update status en compliance_submissions table
  - Return new status
  - Files: `src/app/api/staff/compliance/retry/route.ts`
  - Agent: **backend-developer**
  - Test: Retry re-submits successfully, status updates

### 4.5 UI: Dashboard Compliance Submissions tab
- [ ] Crear ComplianceSubmissions.tsx (dashboard tab) (estimate: 2h)
  - Features: Lista de submissions, filters (status, date range, tenant), view details modal, retry button
  - Columns: guest name, type, status badge, submitted at, actions
  - View details modal: all data, SIRE response, TRA response, error message
  - Retry button: re-submit y actualiza status
  - Files: `src/components/Dashboard/ComplianceSubmissions.tsx`
  - Agent: **ux-interface**
  - Test: Component renders, filters work, view details works, retry works

### 4.6 UI: Add "Compliance" tab to AuthenticatedDashboard
- [ ] Agregar tab "Compliance" al dashboard (estimate: 30min)
  - Add tab button: "=� Compliance"
  - Render ComplianceSubmissions component when active
  - Files: `src/components/Dashboard/AuthenticatedDashboard.tsx`
  - Agent: **ux-interface**
  - Test: Tab visible, component renders on click

---

## FASE 5: Testing & Validation >� (4-5h)

### 5.1 E2E Tests: Guest portal flow
- [ ] Crear E2E tests para guest portal (estimate: 2h)
  - Test suites: Guest login, multi-conversation (create, switch, delete), compliance flow (initiate, data capture, confirm, submit)
  - Mock SIRE/TRA submissions
  - Test error handling (validation, API failures)
  - Files: `e2e/guest-portal-multi-conversation.spec.ts`
  - Agent: **backend-developer**
  - Test: `npx playwright test e2e/guest-portal-multi-conversation.spec.ts` � All passing

### 5.2 E2E Tests: Compliance flow
- [ ] Crear E2E tests espec�ficos para compliance (estimate: 1h)
  - Test suites: Compliance reminder, conversational capture, confirmation modal, success screen, staff notifications
  - Test error cases: invalid data, SIRE timeout, TRA API down
  - Files: `e2e/compliance-flow.spec.ts`
  - Agent: **backend-developer**
  - Test: `npx playwright test e2e/compliance-flow.spec.ts` � All passing

### 5.3 Manual Testing: Full checklist
- [ ] Manual testing exhaustivo (estimate: 2h)
  - Desktop (Chrome, Safari, Firefox): sidebar, conversations, compliance
  - Mobile (iOS Safari, Android Chrome): drawer, touch gestures, keyboard
  - Subdomain: simmerdown.innpilot.io resolution, SSL valid
  - Backward compatibility: /guest-chat/simmerdown works
  - Edge cases: invalid data, network failures, timeouts
  - Files: `docs/guest-portal-multi-conversation/TESTING_CHECKLIST.md`
  - Agent: **ux-interface**
  - Test: Checklist 100% completado

### 5.4 Performance Testing: Metrics validation
- [ ] Performance testing y optimization (estimate: 1h)
  - Lighthouse score > 90
  - Conversation list load < 500ms
  - Chat message response < 2s
  - Compliance submission < 30s
  - SIRE Puppeteer < 25s
  - TRA API call < 5s
  - Agent: **backend-developer**
  - Test: All metrics met

---

## FASE 6: SEO & Analytics =
 (2-3h)

### 6.1 SEO: Dynamic meta tags per tenant
- [ ] Crear meta tags din�micos por subdomain (estimate: 1h)
  - Title: "{tenant.nombre_comercial} - Guest Portal | InnPilot"
  - Description per tenant
  - OG tags para social sharing
  - Twitter cards
  - Files: `src/app/[subdomain]/layout.tsx` o middleware
  - Agent: **ux-interface**
  - Test: Meta tags render correctamente per tenant

### 6.2 Analytics: Plausible per-subdomain
- [ ] Configurar Plausible Analytics por subdomain (estimate: 1h)
  - Per-subdomain tracking: `data-domain="{subdomain}.innpilot.io"`
  - Goals: "Compliance completed", "Conversation created", "Message sent"
  - Files: `src/app/layout.tsx` (add Plausible script)
  - Agent: **ux-interface**
  - Test: Plausible events firing, goals tracking

### 6.3 SEO: Sitemap.xml per tenant
- [ ] Crear sitemap.xml din�mico (estimate: 45min)
  - Generate sitemap per tenant
  - URL: https://simmerdown.innpilot.io/sitemap.xml
  - Files: `src/app/sitemap.xml/route.ts`
  - Agent: **ux-interface**
  - Test: Sitemap accessible, valid XML

### 6.4 SEO: robots.txt
- [ ] Crear robots.txt (estimate: 15min)
  - Allow all
  - Sitemap reference per tenant
  - Files: `src/app/robots.txt/route.ts`
  - Agent: **ux-interface**
  - Test: robots.txt accessible

---

## FASE 7: Documentation & Deployment =� (2-3h)

### 7.1 Technical Docs: ARCHITECTURE.md
- [ ] Crear ARCHITECTURE.md (estimate: 45min)
  - System architecture diagram
  - Component interactions
  - Database schema
  - API flow diagrams
  - Files: `docs/guest-portal-multi-conversation/ARCHITECTURE.md`
  - Agent: **backend-developer**
  - Test: Documentaci�n completa y clara

### 7.2 Technical Docs: COMPLIANCE_FLOW.md
- [ ] Crear COMPLIANCE_FLOW.md (estimate: 30min)
  - Conversational flow examples
  - State machine diagram
  - Validation rules
  - Error handling
  - Files: `docs/guest-portal-multi-conversation/COMPLIANCE_FLOW.md`
  - Agent: **backend-developer**
  - Test: Flow documentado con ejemplos

### 7.3 Technical Docs: API_REFERENCE.md
- [ ] Crear API_REFERENCE.md (estimate: 1h)
  - All endpoints documented
  - Request/response examples
  - Authentication
  - Rate limiting
  - Error codes
  - Files: `docs/guest-portal-multi-conversation/API_REFERENCE.md`
  - Agent: **api-endpoints-mapper**
  - Test: Todos los endpoints documentados

### 7.4 User Docs: Guides & Troubleshooting
- [ ] Crear user documentation (estimate: 1h)
  - GUEST_GUIDE.md: C�mo usar el portal
  - STAFF_GUIDE.md: Configurar credentials, monitorear submissions
  - TROUBLESHOOTING.md: Common issues, solutions
  - Files: `docs/guest-portal-multi-conversation/{GUEST_GUIDE,STAFF_GUIDE,TROUBLESHOOTING}.md`
  - Agent: **backend-developer** + **ux-interface**
  - Test: Gu�as completas y claras

### 7.5 Deployment: Update GitHub Actions
- [ ] Actualizar .github/workflows/deploy.yml (estimate: 30min)
  - Add compliance test step
  - Health check /api/guest/conversations
  - Deploy to VPS
  - Rollback on failure
  - Files: `.github/workflows/deploy.yml`
  - Agent: **backend-developer**
  - Test: Workflow runs successfully

### 7.6 Deployment: VPS deployment
- [ ] Deploy a VPS production (estimate: 30min)
  - Push to dev branch � Triggers GitHub Actions
  - Monitor deployment
  - Health checks passing
  - Rollback tested
  - Agent: **deploy-agent**
  - Test: https://simmerdown.innpilot.io funcionando en producci�n

---

## =� PROGRESO

**Total Tasks:** 72
**Completed:** 4/72 (6%)

**Por Fase:**
- FASE 0: 1/7 tareas (14%) - = EN PROGRESO
- FASE 1: 0/6 tareas (0%) - = PENDIENTE
- FASE 2: 0/25 tareas (0%) - = PENDIENTE (includes 2.5 Multi-Modal + 2.6 Intelligence)
- FASE 3: 0/11 tareas (0%) - = PENDIENTE
- FASE 4: 0/6 tareas (0%) - = PENDIENTE
- FASE 5: 0/4 tareas (0%) - = PENDIENTE
- FASE 6: 0/4 tareas (0%) - = PENDIENTE
- FASE 7: 0/6 tareas (0%) - = PENDIENTE

**Timeline Estimado:** 36-45 horas total

---

**�ltima actualizaci�n:** 5 de Octubre 2025
**Pr�ximo paso:** Completar FASE 0 (crear TODO.md , workflow.md, actualizar agentes, SNAPSHOT.md, CLAUDE.md)
