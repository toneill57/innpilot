// MATRYOSHKA SEARCH ROUTER - KEYWORD-BASED TIER SELECTION
// Automatically determines optimal search tier based on user query

export interface SearchStrategy {
  tier: 1 | 2 | 3
  dimensions: 1024 | 1536 | 3072
  tables: string[]
  description: string
}

// SEARCH STRATEGY CONFIGURATION - UPDATED FOR ACCOMMODATION SYSTEM
const SEARCH_PATTERNS = {
  // üè† ACCOMMODATION SYSTEM PATTERNS (Tier 1: Ultra Fast - Complete hotel data)
  accommodation_queries: {
    keywords: ['habitaci√≥n', 'habitaciones', 'suite', 'suites', 'apartamento', 'apartamentos', 'cuarto', 'cuartos', 'acomodaci√≥n', 'acomodaciones', 'unidad', 'unidades', 'alojamiento', 'alojamientos', 'tipos', 'tipo', 'qu√© tienen', 'disponible', 'disponibles', 'dreamland', 'mystic', 'kaya', 'vista', 'balc√≥n', 'sunshine', 'one love', 'simmer highs'],
    tier: 1 as const,
    dimensions: 1024 as const,
    tables: ['accommodation_units', 'unit_amenities', 'properties', 'client_info', 'policies'],
    description: 'Consultas completas sobre acomodaciones y tipos de alojamiento'
  },

  hotel_queries: {
    keywords: ['hotel', 'propiedad', 'propiedades', 'lobby', 'recepci√≥n', 'amenidades del hotel', 'piscina', 'gimnasio', 'parking', 'wifi', 'negocio', 'empresa', 'informaci√≥n', 'contacto'],
    tier: 1 as const,
    dimensions: 1024 as const,
    tables: ['properties', 'client_info', 'content', 'guest_information'],
    description: 'Consultas sobre informaci√≥n del hotel y propiedades'
  },

  view_amenities_queries: {
    keywords: ['vista al mar', 'vista oc√©ano', 'vista jard√≠n', 'aire acondicionado', 'cocina', 'tv', 'wifi', 'cuna', 'lavander√≠a'],
    tier: 1 as const,
    dimensions: 1024 as const,
    tables: ['accommodation_units', 'unit_amenities'],
    description: 'Consultas sobre vistas y amenidades espec√≠ficas'
  },

  // üèõÔ∏è LEGACY PATTERNS (mantenemos compatibilidad)
  room_queries: {
    keywords: ['habitaci√≥n', 'habitaciones', 'cuarto', 'cuartos', 'apartamento', 'apartamentos', 'cama', 'camas', 'ba√±o', 'ba√±os', 'dormitorio', 'dormitorios', 'acomodaci√≥n', 'acomodaciones'],
    tier: 1 as const,
    dimensions: 1024 as const,
    tables: ['accommodation_units'],
    description: 'Consultas sobre habitaciones y acomodaciones (legacy)'
  },

  policy_queries: {
    keywords: ['regla', 'pol√≠tica', 'permitido', 'prohibido', 'horario', 'norma', 'reglamento', 'habibi'],
    tier: 1 as const,
    dimensions: 1024 as const,
    tables: ['policies'],
    description: 'Consultas sobre pol√≠ticas y reglas de casa'
  },

  tourism_queries: {
    keywords: ['restaurante', 'playa', 'actividad', 'turismo', 'atracciones', 'cultura', 'eventos'],
    tier: 1 as const,
    dimensions: 1024 as const,
    tables: ['muva_content'],
    description: 'Consultas sobre turismo y atracciones'
  },

  // üè® BOOKING & POLICIES PATTERNS (Tier 2: Balanced - Policies focused)
  booking_queries: {
    keywords: ['reserva', 'disponibilidad', 'check-in', 'check-out', 'cancelaci√≥n', 'modificaci√≥n', 'confirmar'],
    tier: 2 as const,
    dimensions: 1536 as const,
    tables: ['bookings', 'accommodation_units'],
    description: 'Consultas sobre reservas y disponibilidad'
  },

  pricing_queries: {
    keywords: ['precio', 'precios', 'costo', 'costos', 'tarifa', 'tarifas', 'temporada alta', 'temporada baja', 'early check-in', 'late check-out', 'cu√°nto cuesta', 'cu√°nto vale', 'temporadas'],
    tier: 2 as const,
    dimensions: 1536 as const,
    tables: ['pricing_rules', 'accommodation_units', 'content'],
    description: 'Consultas sobre precios, tarifas y reglas de temporada'
  },

  policies_detailed: {
    keywords: ['pol√≠tica de', 'pol√≠ticas', 'reglas de', 'reglas', 'restricciones', 'condiciones', 't√©rminos', 'procedimiento', 'procedimientos', 'normas', 'check-in', 'check-out'],
    tier: 2 as const,
    dimensions: 1536 as const,
    tables: ['policies', 'guest_information', 'properties', 'content'],
    description: 'Consultas detalladas sobre pol√≠ticas, reglas y procedimientos del hotel'
  },

  // üèõÔ∏è LEGACY TIER 2 PATTERNS
  complex_queries: {
    keywords: ['proceso', 'procedimiento', 'informaci√≥n', 'documentaci√≥n', 'instrucciones', 'gu√≠a', 'simmer', 'highs'],
    tier: 2 as const,
    dimensions: 1536 as const,
    tables: ['guest_information', 'content', 'sire_content'],
    description: 'Consultas complejas sobre procesos y documentaci√≥n'
  },

  sire_queries: {
    keywords: ['sire', 'registro', 'extranjeros', 'migraci√≥n', 'documentos', 'compliance'],
    tier: 2 as const,
    dimensions: 1536 as const,
    tables: ['sire_content'],
    description: 'Consultas sobre documentaci√≥n SIRE'
  },

  // üîç DETAILED ANALYSIS PATTERNS (Tier 3: Full Precision - Complex analysis)
  detailed_accommodation: {
    keywords: ['comparar unidades', 'an√°lisis detallado', 'especificaciones completas', 'diferencias entre'],
    tier: 3 as const,
    dimensions: 3072 as const,
    tables: ['accommodation_units', 'unit_amenities', 'pricing_rules', 'hotels'],
    description: 'An√°lisis detallado y comparativo de acomodaciones'
  },

  business_intelligence: {
    keywords: ['tendencias', 'an√°lisis', 'reportes', 'estad√≠sticas', 'ocupaci√≥n', 'revenue'],
    tier: 3 as const,
    dimensions: 3072 as const,
    tables: ['bookings', 'pricing_rules', 'accommodation_units', 'hotels'],
    description: 'Consultas de business intelligence y an√°lisis'
  },

  // üèõÔ∏è LEGACY TIER 3 PATTERNS
  specific_queries: {
    keywords: ['precio', 'costo', 'tarifa', 'amenidad espec√≠fica', 'detalles t√©cnicos'],
    tier: 3 as const,
    dimensions: 3072 as const,
    tables: ['client_info', 'properties', 'unit_amenities', 'pricing_rules'],
    description: 'Consultas espec√≠ficas que requieren m√°xima precisi√≥n (legacy)'
  }
}

/**
 * Determina la estrategia de b√∫squeda √≥ptima basada en el query del usuario
 */
export function determineOptimalSearch(userQuery: string): SearchStrategy {
  if (!userQuery || typeof userQuery !== 'string') {
    return getDefaultStrategy()
  }

  const query = userQuery.toLowerCase().trim()

  // Analizar keywords para determinar tier √≥ptimo
  for (const [patternName, pattern] of Object.entries(SEARCH_PATTERNS)) {
    const hasKeyword = pattern.keywords.some(keyword =>
      query.includes(keyword.toLowerCase())
    )

    if (hasKeyword) {
      console.log(`üéØ Search strategy: ${patternName} (Tier ${pattern.tier}) - ${pattern.description}`)
      return {
        tier: pattern.tier,
        dimensions: pattern.dimensions,
        tables: pattern.tables,
        description: pattern.description
      }
    }
  }

  // Fallback basado en complejidad del query
  return getStrategyByComplexity(query)
}

/**
 * Estrategia basada en complejidad del query como fallback
 */
function getStrategyByComplexity(query: string): SearchStrategy {
  const wordCount = query.split(/\s+/).length
  const hasQuestionWords = /^(qu√©|c√≥mo|cu√°ndo|d√≥nde|por qu√©|cu√°l)/i.test(query)

  if (wordCount <= 3 && !hasQuestionWords) {
    // Consulta simple -> Tier 1 (fast)
    console.log('üöÄ Simple query detected -> Tier 1 (fast)')
    return {
      tier: 1,
      dimensions: 1024,
      tables: ['accommodation_units', 'policies', 'properties', 'unit_amenities'],
      description: 'B√∫squeda r√°pida en datos principales del hotel'
    }
  } else if (wordCount <= 8) {
    // Consulta moderada -> Tier 2 (balanced)
    console.log('‚öñÔ∏è Moderate query detected -> Tier 2 (balanced)')
    return {
      tier: 2,
      dimensions: 1536,
      tables: ['guest_information', 'content', 'pricing_rules', 'unit_amenities'],
      description: 'B√∫squeda balanceada en informaci√≥n detallada del hotel'
    }
  } else {
    // Consulta compleja -> Tier 3 (full precision)
    console.log('üéØ Complex query detected -> Tier 3 (full precision)')
    return {
      tier: 3,
      dimensions: 3072,
      tables: ['all'],
      description: 'B√∫squeda de m√°xima precisi√≥n para consultas complejas'
    }
  }
}

/**
 * Estrategia por defecto para queries indefinidos
 */
function getDefaultStrategy(): SearchStrategy {
  console.log('‚ö†Ô∏è Using default search strategy -> Complete hotel data')
  return {
    tier: 2, // Balanced como default
    dimensions: 1536,
    tables: ['accommodation_units', 'policies', 'guest_information', 'properties', 'content', 'pricing_rules', 'unit_amenities', 'client_info'],
    description: 'Estrategia por defecto - b√∫squeda completa de datos del hotel'
  }
}

/**
 * Combina m√∫ltiples estrategias para b√∫squedas h√≠bridas
 */
export function getCombinedStrategy(userQuery: string): SearchStrategy[] {
  const primary = determineOptimalSearch(userQuery)
  const strategies: SearchStrategy[] = [primary]

  // Si es Tier 1, agregar Tier 2 como fallback para mayor cobertura
  if (primary.tier === 1) {
    strategies.push({
      tier: 2,
      dimensions: 1536,
      tables: ['guest_information', 'content'],
      description: 'Fallback balanceado para mayor cobertura'
    })
  }

  return strategies
}

/**
 * Valida si la estrategia es aplicable basada en datos disponibles
 */
export function validateStrategy(strategy: SearchStrategy, availableTables: string[]): boolean {
  return strategy.tables.some(table =>
    table === 'all' || availableTables.includes(table)
  )
}

/**
 * Genera par√°metros para la funci√≥n de b√∫squeda SQL
 */
export function generateSearchParams(strategy: SearchStrategy) {
  return {
    target_tables: strategy.tables,
    force_tier: strategy.tier === 1 ? 'fast' : strategy.tier === 2 ? 'balanced' : 'full',
    expected_dimensions: strategy.dimensions
  }
}